// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_PRISMA_URL")
}

model Reputation {
  id          String  @id @unique @default(cuid())
  score       Int
  message     String?
  sender_id   String
  receiver_id String
  sender      User    @relation("reputations_given", references: [id], fields: [sender_id])
  receiver    User    @relation("reputations", references: [id], fields: [receiver_id], onDelete: Cascade)
}

model Category {
  id                String         @id @unique @default(cuid())
  name              String
  description       String
  order             Int            @default(0)
  is_premium_only   Boolean        @default(false)
  is_admin_only     Boolean        @default(false)
  threads           Thread[]       @relation("threads")
  category_group_id String?
  last_thread_id    String?        @unique
  category_group    CategoryGroup? @relation(references: [id], fields: [category_group_id])
  last_thread       Thread?        @relation("last_thread", references: [id], fields: [last_thread_id], onDelete: Cascade)
}

model CategoryGroup {
  id          String     @id @unique @default(cuid())
  name        String
  description String
  order       Int        @default(0)
  categories  Category[]
}

model Thread {
  id               String    @id @unique @default(cuid())
  title            String
  publish_date     DateTime  @default(now())
  updated_date     DateTime  @updatedAt
  posts            Post[]
  author_id        String
  category_id      String
  author           User      @relation(references: [id], fields: [author_id], onDelete: Cascade)
  category         Category  @relation("threads", references: [id], fields: [category_id], onDelete: Cascade)
  last_category    Category? @relation("last_thread")
}

model Post {
  id           String   @id @unique @default(cuid())
  publish_date DateTime @default(now())
  updated_date DateTime @updatedAt
  is_first     Boolean  @default(false)
  content      String
  likedBy      User[]   @relation("liked_posts")
  dislikedBy   User[]   @relation("disliked_posts")
  thread_id    String
  author_id    String
  thread       Thread   @relation(references: [id], fields: [thread_id], onDelete: Cascade, onUpdate: Cascade)
  author       User     @relation(references: [id], fields: [author_id], onDelete: Cascade)
}

model User {
  id                       String                   @id @unique
  username                 String                   @unique
  email                    String                   @unique
  email_verified           Boolean                  @default(false)
  join_date                DateTime                 @default(now())
  is_premium               Boolean                  @default(false)
  is_admin                 Boolean                  @default(false)
  threads                  Thread[]
  posts                    Post[]
  liked_posts              Post[]                   @relation("liked_posts")
  disliked_posts           Post[]                   @relation("disliked_posts")
  reputations              Reputation[]             @relation("reputations")
  reputations_given        Reputation[]             @relation("reputations_given")
  bio                      String?
  signature                String?
  avatar_url               String?
  auth_session             Session[]
  key                      Key[]
  email_verification_token EmailVerificationToken[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model EmailVerificationToken {
  id      String @id @unique
  expires BigInt
  user_id String
  user    User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}
